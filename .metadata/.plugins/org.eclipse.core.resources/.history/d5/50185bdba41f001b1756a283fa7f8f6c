package EstructurasDeDatos;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.Topological;

/* Computes the longest path between the last vertex and any other vertex in a DAG */

public class LongestPathDAG {
	
	Digraph G;
	Digraph reversedG; 
	private Topological topologicalOrder;
	List <Integer> topologicalOrderList;
	
	// Array that contains the longest path of each vertex
	private ArrayList<Integer> priorityVerticesDAG;
	
	/*
	 * Constructor for the class
	 * vertex1 and vertex2 are vertices in the digraph G 
	 */
	public LongestPathDAG(Digraph pG){
		
		G=pG;
		reversedG = G.reverse();
		
		// Fills the array that contains the longest path of each vertex with zeroes
		priorityVerticesDAG = new ArrayList<Integer>();
		for (int i = 0 ; i < G.V() ; i++)
		{
			priorityVerticesDAG.add(0);
		}
		
		topologicalOrder = new Topological(G);
		Iterable <Integer> topologicalOrderIterable = topologicalOrder.order();
		Iterator <Integer> iteratorTopologicalOrder = topologicalOrderIterable.iterator();
		
		// Save the elements of topological order in a List
		topologicalOrderList = new ArrayList<>();
		iteratorTopologicalOrder.forEachRemaining(topologicalOrderList::add);
		
		// Prints the elements of the topological order of the graph
		System.out.print("The topological order of the graph is:");
		for (int i = 0; i<topologicalOrderList.size(); i++)
		{	
			System.out.print(" "+topologicalOrderList.get(i).toString());
		}
		System.out.println(".");

		
	}
	
	/**
	 * Calculate the longest path from a given vertex to the last vertex in the graph
	 * @param vertex
	 * @return the longest path to the given vertex
	 */
	public int calculateLongestPathLengthFromVertex (int vertex)
	{
		int longestPathLengthFromVertex = 0;
		Integer currentVertex = 0;
		
		for (int i = 0; i < topologicalOrderList.size() ; i++)
		{
			currentVertex = topologicalOrderList.get(i);
			if (G.indegree(currentVertex) == 0)
			{
				longestPathLengthFromVertex = 0;
			}
			else
			{
				Iterable <Integer> incidentVertices = reversedG.adj(vertex);
				Iterator <Integer> incidentVerticesIterator = incidentVertices.iterator();
			}
		}
		
		int currentVertexLongestPath=0;
		Iterable <Integer> adjacentVertices = G.adj(vertex);
		Iterator <Integer> adjacentVerticesIterator = adjacentVertices.iterator();
		if(adjacentVerticesIterator.hasNext())
		{
			while(adjacentVerticesIterator.hasNext())
			{	
				Integer currentVertex = adjacentVerticesIterator.next().intValue();
				currentVertexLongestPath = calculateLongestPathLengthFromVertex(currentVertex)+1; 
				priorityVerticesDAG.set(currentVertex.intValue(), currentVertexLongestPath-1);
				if (currentVertexLongestPath > longestPathLengthFromVertex)
				{
					longestPathLengthFromVertex = currentVertexLongestPath;
				}
			}
		}
		priorityVerticesDAG.set(vertex,longestPathLengthFromVertex);
		return longestPathLengthFromVertex;
	}
	
	public ArrayList<Integer> getPriorityVerticesDAG()
	{
		System.out.print("The priority of the vertices is:");
		for (int i=0 ; i < priorityVerticesDAG.size(); i++)
		{
			System.out.print(" " + priorityVerticesDAG.get(i));
		}
		System.out.println(".");
		return priorityVerticesDAG;
	}
	
}
